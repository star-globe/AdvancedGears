<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
#>
<#= generatedHeader #>

using Improbable.Gdk.Core;
using Improbable.Worker.Core;
using System;
using System.Collections.Generic;
using Unity.Entities;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName  #>
    {
        public const uint ComponentId = <#= componentDetails.ComponentId #>;

        public struct Component : IComponentData, ISpatialComponentData
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;

            public BlittableBool DirtyBit { get; set; }
<# foreach(var fieldDetails in fieldDetailsList) { #>
<# if (fieldDetails.IsBlittable) { #>

            private <#= fieldDetails.Type #> <#= fieldDetails.CamelCaseName #>;

            public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>
            {
                get => <#= fieldDetails.CamelCaseName #>;
                set
                {
                    DirtyBit = true;
                    <#= fieldDetails.CamelCaseName #> = value;
                }
            }
<# } else { #>

            internal uint <#= fieldDetails.CamelCaseName #>Handle;

            public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>
            {
                get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Get(<#= fieldDetails.CamelCaseName #>Handle);
                set
                {
                    DirtyBit = true;
                    <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Set(<#= fieldDetails.CamelCaseName #>Handle, value);
                }
            }
<# } #>
<# } #>

<# if (!UnityTypeMappings.WellKnownComponents.Contains(componentDetails.ComponentId)) { #>
            public static global::Improbable.Worker.Core.ComponentData CreateSchemaComponentData(
<# foreach(var fieldDetails in fieldDetailsList) {
    var lastItem = fieldDetailsList[fieldDetailsList.Count - 1];
#>
                <#= fieldDetails.Type #> <#= fieldDetails.CamelCaseName #><#= lastItem != fieldDetails ? "," : "" #>
<# } #>
        )
            {
                var schemaComponentData = new global::Improbable.Worker.Core.SchemaComponentData(<#= componentDetails.ComponentId #>);
                var obj = schemaComponentData.GetFields();
<# foreach (var fieldDetails in fieldDetailsList) { #>
                {
                    <#= fieldDetails.GetSerializationString(fieldDetails.CamelCaseName, "obj", 4) #>
                }
<# } #>
                return new global::Improbable.Worker.Core.ComponentData(schemaComponentData);
            }
<# } #>
        }

        public static class Serialization
        {
            public static void SerializeUpdate(<#= componentNamespace #>.Component component, global::Improbable.Worker.Core.SchemaComponentUpdate updateObj)
            {
                var obj = updateObj.GetFields();
<# foreach (var fieldDetails in fieldDetailsList) { #>
                {
                    <#= fieldDetails.GetSerializationString("component." + fieldDetails.PascalCaseName, "obj", 5) #>
<# if (ShouldGenerateClearedFieldsSet()) { #>
                    <#= fieldDetails.GetTrySetClearedFieldString("component." + fieldDetails.PascalCaseName, "updateObj", 5) #>
<# } #>
                }
<# } #>
            }

            public static <#= componentNamespace #>.Component Deserialize(global::Improbable.Worker.Core.SchemaObject obj, global::Unity.Entities.World world)
            {
                var component = new <#= componentNamespace #>.Component();

<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                component.<#= fieldDetails.CamelCaseName#>Handle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Allocate(world);
<# } #>
                {
                    <#= fieldDetails.GetDeserializeString("component." + fieldDetails.PascalCaseName, "obj", 5) #>
                }
<# } #>
                return component;
            }

            public static <#= componentNamespace #>.Update DeserializeUpdate(global::Improbable.Worker.Core.SchemaComponentUpdate updateObj)
            {
                var update = new <#= componentNamespace #>.Update();
                var obj = updateObj.GetFields();

<# if (ShouldGenerateClearedFieldsSet()) { #>
                var clearedFields = updateObj.GetClearedFields();

<# } #>
<# foreach (var fieldDetails in fieldDetailsList) { #>
                {
                    <#= fieldDetails.GetDeserializeUpdateIntoUpdateString("update." + fieldDetails.PascalCaseName, "obj", 5) #>
                }
<# } #>
                return update;
            }

            public static void ApplyUpdate(global::Improbable.Worker.Core.SchemaComponentUpdate updateObj, ref <#= componentNamespace #>.Component component)
            {
                var obj = updateObj.GetFields();

<# if (ShouldGenerateClearedFieldsSet()) { #>
                var clearedFields = updateObj.GetClearedFields();

<# } #>
<# foreach (var fieldDetails in fieldDetailsList) { #>
                {
                    <#= fieldDetails.GetDeserializeUpdateString("component." + fieldDetails.PascalCaseName, "obj", 5) #>
                }
<# } #>
            }
        }

        public struct Update : ISpatialComponentUpdate
        {
            internal static Stack<List<Update>> Pool = new Stack<List<Update>>();

<# foreach(var fieldDetails in fieldDetailsList) { #>
            public Option<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>;
<# } #>
        }

        public struct ReceivedUpdates : IComponentData
        {
            internal uint handle;
            public global::System.Collections.Generic.List<Update> Updates
            {
                get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.UpdatesProvider.Get(handle);
            }
        }

        internal class <#= componentDetails.ComponentName  #>Dynamic : IDynamicInvokable
        {
            public uint ComponentId => <#= componentDetails.ComponentName  #>.ComponentId;

            private static Component DeserializeData(ComponentData data, World world)
            {
                var schemaDataOpt = data.SchemaData;
                if (!schemaDataOpt.HasValue)
                {
                    throw new ArgumentException($"Can not deserialize an empty {nameof(ComponentData)}");
                }

                return Serialization.Deserialize(schemaDataOpt.Value.GetFields(), world);
            }

            private static Update DeserializeUpdate(ComponentUpdate update, World world)
            {
                var schemaDataOpt = update.SchemaData;
                if (!schemaDataOpt.HasValue)
                {
                    throw new ArgumentException($"Can not deserialize an empty {nameof(ComponentUpdate)}");
                }

                return Serialization.DeserializeUpdate(schemaDataOpt.Value);
            }

            public void InvokeHandler(Dynamic.IHandler handler)
            {
                handler.Accept<Component, Update>(<#= componentDetails.ComponentName  #>.ComponentId, DeserializeData, DeserializeUpdate);
            }
        }
    }
}
