<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System.Collections.Generic;
using Improbable.Gdk.Core;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
<# foreach (var command in commandDetailsList) {
        var receivedRequestType = command.CommandName + ".ReceivedRequest";
        var receivedResponseType = command.CommandName + ".RawReceivedResponse";
#>
        public class <#= command.CommandName #>CommandMetaDataStorage : ICommandMetaDataStorage, ICommandPayloadStorage<<#= command.FqnRequestType #>>
        {
            private readonly Dictionary<long, CommandContext<<#= command.FqnRequestType #>>> requestIdToRequest =
                new Dictionary<long, CommandContext<<#= command.FqnRequestType #>>>();

            private readonly Dictionary<uint, long> internalRequestIdToRequestId = new Dictionary<uint, long>();

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public uint GetCommandId()
            {
                return <#= command.CommandIndex #>;
            }

            public void RemoveMetaData(uint internalRequestId)
            {
                var requestId = internalRequestIdToRequestId[internalRequestId];
                internalRequestIdToRequestId.Remove(internalRequestId);
                requestIdToRequest.Remove(requestId);
            }

            public void SetInternalRequestId(uint internalRequestId, long requestId)
            {
                internalRequestIdToRequestId.Add(internalRequestId, requestId);
            }

            public void AddRequest(in CommandContext<<#= command.FqnRequestType #>> context)
            {
                requestIdToRequest[context.RequestId] = context;
            }

            public CommandContext<<#= command.FqnRequestType #>> GetPayload(uint internalRequestId)
            {
                var id = internalRequestIdToRequestId[internalRequestId];
                return requestIdToRequest[id];
            }
        }

<# } #>
    }
}
