package playground;
import "from_gdk_packages/com.improbable.gdk.core/common.schema";
import "playground/common.schema";
import "improbable/vector3.schema";

// fuel:21100~21109
enum FuelModifyType
{
    None = 0;
    Consume = 1;
    Feed = 2;
    Absorb = 3;
}

type FuelModifier {
    FuelModifyType type = 1;
    int32 amount = 2;
}

component FuelComponent {
    id = 21100;

    int32 fuel = 1;
    int32 max_fuel = 2;

    command improbable.common.Empty modify_fuel(FuelModifier);
    event FuelModifier fuel_modified;
}

component FuelServer {
    id = 21101;

    IntervalChecker interval = 1;
    float range = 2;
    int32 feed_rate = 3;
    int32 gain_rate = 4;
}

enum SupplyOrderType {
    None = 0;
    Deliver = 1;
    Accept = 2;
}

type SupplyPoint {
    improbable.Vector3f pos = 2;
    EntityId stronghold_id = 3;
}

type SupplyOrder {
    SupplyOrderType type = 1;
    SupplyPoint point = 2;
}

type SupplyOrderResult {
    bool result = 1;
    EntityId self_id = 2;
    SupplyOrder order = 3;
}

type SupplyPlan {
    list<SupplyOrder> orders = 1;
}

type SupplyPointsDetail {
    SupplyPoint point = 1;
    int32 reserve = 2;
}

component FuelSupplyer {
    id = 21102;

    SupplyOrder order = 1;
    bool order_finished = 2;
    float range = 3;
    EntityId manager_id = 4;

    IntervalChecker interval = 5;

    command improbable.common.Empty set_order(SupplyOrder); 
}

component FuelSupplyManager {
    id = 21103;

    IntervalChecker interval = 1;
    map<EntityId,SupplyPointsDetail> supply_points = 2;
    map<EntityId,SupplyPlan> supply_orders = 3;
    list<EntityId> free_supplyers = 4;

    command SupplyOrder finish_order(SupplyOrderResult);
    command improbable.common.Empty add_supply_points(SupplyPoint);
}

//---------------------------------
// engineering:21110~21119
enum EngineeringType {
    None = 0;
    Repair = 1;
    Occupy = 2;
    Build = 3;
}

type EngineeringPoint {
    UnitType unit_type = 1;
    improbable.Vector3f pos = 2;
    EntityId unit_id = 3;
}

type EngineeringOrder {
    EngineeringType type;
    EngineeringPoint point;
}

type EngineeringPlan {
    list<EngineeringOrder> orders = 1;
}

type EngineeringOrderResult {
    bool result = 1;
    EntityId self_id = 2;
    EngineeringOrder order = 3;
}

component EngineeringComponent {
    id = 21110;

    EngineeringOrder order = 1;
    bool order_finished = 2;
    float range = 3;
    EntityId manager_id = 4;

    IntervalChecker interval = 5;

    command improbable.common.Empty set_order(EngineeringOrder);
}

component EngineeringManager {
    id = 21111;

    IntervalChecker interval = 1;
    map<EntityId,EngineeringPoint> engineering_points = 2;
    map<EntityId,EngineeringPlan> engineering_orders = 3;
    list<EntityId> free_engineers = 4;

    command EngineeringOrder finish_order(EngineeringOrderResult);
    command improbable.common.Empty add_engineering_points(EngineeringPoint);
}