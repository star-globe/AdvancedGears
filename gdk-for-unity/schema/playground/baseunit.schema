package playground;
import "improbable/vector3.schema";
import "from_gdk_packages/com.improbable.gdk.core/common.schema";
import "from_gdk_packages/com.improbable.gdk.transformsynchronization/transform_internal.schema";
import "playground/common.schema";

enum UnitType {
    None = 0;
    Soldier = 1;
    Commander = 2;
    Stronghold = 3;
    Turret = 4;
    Advanced = 5;
    Supply = 6;
}

enum UnitSide {
    None = 0;
    A = 1;  // AltriaUnion = 1;
    B = 2;  // GlobalEconomicalCommons = 2;
    C = 3;  // JormuTreatyOrganization = 3;
    Others = 99;
}

enum UnitState {
    None = 0;
    Alive = 1;
    Dead = 2;
}

enum OrderType {
    Idle = 0;
    Move = 1;
    Attack = 2;
    Keep = 3;
    Escape = 5;
}

type OrderInfo {
    OrderType order = 1;
}

// state:20000~20009
component BaseUnitStatus {
    id = 20000;
    UnitSide side = 1;
    UnitType type = 2;
    UnitState state = 3;
    OrderType order = 4;

    command improbable.common.Empty set_order(OrderInfo);
}

type HealthModifier {
    uint32 type = 1;
    int32 amount = 2;
}

type HealthModifiedInfo {
    HealthModifier modifier = 1;
    int32 health_before = 2;
    int32 health_after = 3;
}

component BaseUnitHealth {
    id = 20002;
    int32 health = 1;
    int32 max_health = 2;

    int32 defense = 3;

    command improbable.common.Empty modify_health(HealthModifier);
    event HealthModifiedInfo health_modified;
}

// move:20010~20019
component BaseUnitMovement {
    id = 20010;

    float move_speed = 1;
    float rot_speed = 2;

    bool is_target = 3;
    improbable.Vector3f target_position = 4;
    float target_range = 5;
    
    improbable.Vector3f commander_position = 6;

    float consume_rate = 7;
}

component BaseUnitSight {
    id = 20011;

    float range = 1;
    IntervalChecker interval = 2;
    // ability:night vision
}

component BaseUnitAction {
    id = 20012;

    IntervalChecker interval = 1;

    float angle_speed = 5;

    bool is_target = 6;
    list<improbable.Vector3f> enemy_positions = 7;
}

type TargetBaseInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.Vector3f position = 3;
    UnitType type = 4;
    UnitSide side = 5;
}

type TargetInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.Vector3f position = 3;
    UnitType type = 4;
    UnitSide side = 5;
    EntityId commander_id = 6;
    float ally_range = 7;
}

component BaseUnitTarget {
    id = 20013;

    TargetInfo target_info = 1;

    command improbable.common.Empty set_target(TargetInfo);
}

type PostureData {
    PosturePoint point = 1;
    list<improbable.transform.Quaternion> rotations = 2;
}

type PostureInfo {
    map<PosturePoint, PostureData> datas = 1;
}

component BaseUnitPosture {
    id = 20014;

    bool initialized = 1;
    IntervalChecker interval = 2;

    improbable.transform.Quaternion root = 3;
    PostureInfo posture = 4;

    event PostureData posture_changed;
}

// commander:20020~
type FollowerInfo {
    list<EntityId> followers = 1;
}

component CommanderStatus {
    id = 20020;

    OrderType self_order = 1;
    OrderType upper_order = 2;

    uint32 rank = 3;

    float ally_range = 4;
    FollowerInfo follower_info = 5;

    command improbable.common.Empty add_follower(FollowerInfo);
}

type WarPower {
    UnitSide side = 1;
    float power = 2;
}

component CommanderSight {
    id = 20021;

    float range = 1;
    IntervalChecker interval = 2;

    TargetBaseInfo target_info = 5;

    list<WarPower> war_powers = 7;
}

type ProductOrder {
    EntityId customer = 1;
    UnitSide side = 2;
    UnitType type = 3;
    int32 number = 4;
}

component CommanderAction {
    id = 20022;

    bool is_target = 1;
    IntervalChecker interval = 2;
}

// stronghold:20030~
component StrongholdUnitStatus {
    id = 20030;

    float capture_range = 1;
}

component UnitFactory {
    id = 20032;

    int32 resource = 1;
    int32 resource_max = 2;

    IntervalChecker interval = 3;

    transient list<ProductOrder> orders = 4;

    ProductOrder current_order = 5;
    IntervalChecker product_interval = 6;

    command improbable.common.Empty send_order(ProductOrder);
}
