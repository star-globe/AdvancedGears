package advanced_gears;
import "improbable/gdk/core/common.schema";
import "advanced_gears/common.schema";
import "advanced_gears/baseunit.schema";
import "improbable/gdk/transform_synchronization/transform_internal.schema";

// fuel:21100~21109
enum FuelModifyType
{
    None = 0;
    Consume = 1;
    Feed = 2;
    Absorb = 3;
}

type FuelModifier {
    FuelModifyType type = 1;
    int32 amount = 2;
}

component FuelComponent {
    id = 21100;

    int32 fuel = 1;
    int32 max_fuel = 2;

    command improbable.gdk.core.Empty modify_fuel(FuelModifier);
    event FuelModifier fuel_modified;
}

component FuelServer {
    id = 21101;

    IntervalChecker interval = 1;
    float range = 2;
    int32 feed_rate = 3;
    int32 gain_rate = 4;
}

enum SupplyOrderType {
    None = 0;
    Deliver = 1;
    Accept = 2;
}

type SupplyPoint {
    UnitSide side = 1;
    improbable.gdk.transform_synchronization.FixedPointVector3 pos = 2;
    EntityId stronghold_id = 3;
}

type SupplyOrder {
    SupplyOrderType type = 1;
    SupplyPoint point = 2;
}

type SupplyOrderResult {
    bool result = 1;
    EntityId self_id = 2;
    SupplyOrder order = 3;
}

type SupplyPlan {
    list<SupplyOrder> orders = 1;
}

type SupplyPointsDetail {
    SupplyPoint point = 1;
    int32 reserve = 2;
}

component FuelSupplyer {
    id = 21102;

    SupplyOrder order = 1;
    bool order_finished = 2;
    float range = 3;
    EntityId manager_id = 4;

    IntervalChecker interval = 5;

    command improbable.gdk.core.Empty set_order(SupplyOrder); 
}

component FuelSupplyManager {
    id = 21103;

    IntervalChecker interval = 1;
    map<EntityId,SupplyPointsDetail> supply_points = 2;
    map<EntityId,SupplyPlan> supply_orders = 3;
    list<EntityId> free_supplyers = 4;

    command SupplyOrder finish_order(SupplyOrderResult);
    command improbable.gdk.core.Empty add_supply_points(SupplyPoint);
}

//---------------------------------
// engineering:21110~21119
// *****disuse*****
enum EngineeringType {
    None = 0;
    Repair = 1;
    Occupy = 2;
    Build = 3;
}

type EngineeringPoint {
    UnitSide side = 1;
    improbable.gdk.transform_synchronization.FixedPointVector3 pos = 2;
    EntityId unit_id = 3;
    UnitType unit_type = 4;
}

type EngineeringOrder {
    EngineeringType type = 1;
    EngineeringPoint point = 2;
}

type EngineeringPlan {
    list<EngineeringOrder> orders = 1;
}

type EngineeringOrderResult {
    bool result = 1;
    EntityId self_id = 2;
    EngineeringOrder order = 3;
}

component EngineeringComponent {
    id = 21110;

    EngineeringOrder order = 1;
    bool order_finished = 2;
    float range = 3;
    EntityId manager_id = 4;

    IntervalChecker interval = 5;

    command improbable.gdk.core.Empty set_order(EngineeringOrder);
}

component EngineeringManager {
    id = 21111;

    IntervalChecker interval = 1;
    map<EntityId,EngineeringPoint> engineering_points = 2;
    map<EntityId,EngineeringPlan> engineering_orders = 3;
    list<EntityId> free_engineers = 4;

    command EngineeringOrder finish_order(EngineeringOrderResult);
    command improbable.gdk.core.Empty add_engineering_points(EngineeringPoint);
}

//---------------------------------
// domination:21120~21129
enum DominationDeviceType {
    None = 0;
    Capturing = 1;
    Jamming = 2;
}

component DominationDevice {
    id = 21120;

    DominationDeviceType type = 1;
    float speed = 2;
}

component DominationStamina {
    id = 21121;

    IntervalChecker interval = 1;
    float range = 2;
    float max_stamina = 3;

    map<UnitSide,float> side_staminas = 4;
}