package advanced_gears;
import "improbable/standard_library.schema";
import "improbable/gdk/core/common.schema";
import "improbable/gdk/transform_synchronization/transform_internal.schema";
import "advanced_gears/common.schema";

enum OrderType {
    Idle = 0;
    Move = 1;
    Attack = 2;
    Keep = 3;
    Guard = 4;
    Supply = 5;
}

type OrderInfo {
    OrderType order = 1;
    float rate = 2;
}

type OrderPair {
    OrderType self = 1;
    OrderType upper = 2;
}

type ForceStateChange {
    UnitSide side = 1;
    UnitState state = 2;
}

// state:20000~20009
component BaseUnitStatus {
    id = 20000;
    UnitSide side = 1;
    UnitType type = 2;
    UnitState state = 3;
    OrderType order = 4;
    uint32 rank = 5;

    command improbable.gdk.core.Empty set_order(OrderInfo);
    event ForceStateChange force_state;
}

type HealthModifier {
    uint32 type = 1;
    int32 amount = 2;
}

type HealthDiff {
    int32 diff = 1;
}

component BaseUnitHealth {
    id = 20002;
    int32 health = 1;
    int32 max_health = 2;

    int32 defense = 3;

    float recovery_amount = 4;

    command improbable.gdk.core.Empty modify_health(HealthModifier);
    event HealthDiff health_diffed;
}

component BaseUnitReviveTimer {
    id = 20003;

    bool is_start = 1;
    double rest_time = 2;
}

type BoidVector {
    improbable.gdk.transform_synchronization.FixedPointVector3 vector = 1;
    improbable.gdk.transform_synchronization.FixedPointVector3 center = 2;

    float boid_radius = 4;
    float potential = 5;
}

// move:20010~20019
component BaseUnitMovement {
    id = 20010;

    float move_speed = 1;
    float rot_speed = 2;

    float consume_rate = 8;
}

enum TargetState {
    None = 0;
    MovementTarget = 1;
    ActionTarget = 2;
    OutOfRange = 3;
}

component BaseUnitSight {
    id = 20011;

    TargetState state = 1;
    improbable.gdk.transform_synchronization.FixedPointVector3 target_position = 2;
    float target_range = 3;
    
    BoidVector boid_vector = 7;
    double boid_update_time = 8;

    event BoidVector boid_diffed;
}

component BaseUnitAction {
    id = 20012;

    float sight_range = 2;

    list<improbable.gdk.transform_synchronization.FixedPointVector3> enemy_positions = 7;
}

type TargetBaseInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.gdk.transform_synchronization.FixedPointVector3 position = 3;
    UnitType type = 4;
    UnitSide side = 5;
    UnitState state = 6;
}

type TargetInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.gdk.transform_synchronization.FixedPointVector3 position = 3;
    UnitType type = 4;
    UnitSide side = 5;
    UnitState state = 6;
    EntityId commander_id = 7;
    float ally_range = 8;
}

type TargetFrontLineInfo {
    FrontLineInfo front_line = 1;
}

type TargetHexInfo {
    uint32 hex_index = 2;
    UnitSide side = 3;
}

type TargetStrongholdInfo {
    EntityId stronghold_id = 1;
    UnitSide side = 2;
    improbable.Coordinates position = 3;
}

enum TargetType {
    None = 0;
    FromCommander = 1;
    Stronghold = 2;
    FrontLine = 3;
    Hex = 4;
}

type TargetInfoSet {
    TargetStrongholdInfo stronghold = 1;
    TargetFrontLineInfo front_line = 2;
    TargetHexInfo hex_info = 3;
}

component BaseUnitTarget {
    id = 20013;

    TargetState state = 1;
    TargetType type = 2;

    TargetInfo target_info = 10;
    TargetStrongholdInfo stronghold_info = 11;
    TargetFrontLineInfo front_line = 12;
    TargetHexInfo hex_info = 13;

    command improbable.gdk.core.Empty set_target(TargetInfo);
    command improbable.gdk.core.Empty set_front_line(TargetFrontLineInfo);
    command improbable.gdk.core.Empty set_hex(TargetHexInfo);
    command improbable.gdk.core.Empty set_stronghold(TargetStrongholdInfo);
}
// 削除予定
type PostureData {
    PosturePoint point = 1;
    list<improbable.gdk.transform_synchronization.CompressedQuaternion> rotations = 2;
}
// 削除予定
type PostureInfo {
    map<PosturePoint, PostureData> datas = 1;
}

// 削除予定
component BaseUnitPosture {
    id = 20014;

    bool initialized = 1;
    IntervalChecker interval = 2;

    improbable.gdk.transform_synchronization.CompressedQuaternion root = 3;
    PostureInfo posture = 4;

    event PostureData posture_changed;
}

component BoidComponent {
    id = 20015;

    float forward_length = 3;
    float separete_weight = 4;
    float alignment_weight = 5;
    float cohesion_weight = 6;
}

// commander:20020~
type FollowerInfo {
    list<EntityId> followers = 1;
    list<EntityId> under_commanders = 2;
}

type SuperiorInfo {
    EntityId entity_id = 1;
}

type HQInfo {
    EntityId entity_id = 1;
}

component CommanderStatus {
    id = 20020;

    OrderPair order = 1;

    float ally_range = 4;
}

type TeamInfo {
    EntityId commander_id = 1;
    uint32 rank = 2;
    OrderType order = 4;
    TargetInfoSet target_info_set = 5;
    EntityId stronghold_entity_id = 6;
}

type TeamInfoResponse {
    EntityId hq_entity_id = 1;
    TeamInfo team_info = 2;
}

type TeamInfoRequest {
    EntityId hq_entitt_id = 1;
}

component CommanderTeam {
    id = 20021;

    FollowerInfo follower_info = 1;
    SuperiorInfo superior_info = 2;

    TargetInfoSet target_info_set = 3;
    int32 is_need_update = 4;

    EntityId stronghold_entity_id = 10;

    command improbable.gdk.core.Empty add_follower(FollowerInfo);
    command improbable.gdk.core.Empty set_superior(SuperiorInfo);
    command TeamInfoResponse get_team_info(TeamInfoRequest);
    command improbable.gdk.core.Empty set_target_stroghold(TargetStrongholdInfo);
    command improbable.gdk.core.Empty set_target_frontline(TargetFrontLineInfo);
    command improbable.gdk.core.Empty set_target_hex(TargetHexInfo);
}

type WarPower {
    UnitSide side = 1;
    float power = 2;
}

component CommanderSight {
    id = 20022;

    list<WarPower> war_powers = 7;
}

type FollowerOrder {
    EntityId customer = 1;
    UnitSide side = 3;
    UnitType type = 4;
    int32 number = 5;
    uint32 rank = 6;
    float rot = 7;
}

type SuperiorOrder {
    list<EntityId> followers = 1;
    UnitSide side = 3;
    uint32 rank = 4;
    float rot = 5;
}

enum CommandActionType
{
    None = 0;
    Product = 1;
    Capturing = 2;
}

component CommanderAction {
    id = 20023;

    bool is_target = 1;
    IntervalChecker interval = 2;
    CommandActionType action_type = 3;
}

component PathFinderComponent {
    id = 20024;

    int32 current_index = 1;
    list<improbable.Coordinates> points = 2;
    improbable.Coordinates end_point = 3;

    command improbable.gdk.core.Empty set_end_point(improbable.Coordinates);
}

// stronghold:20030~
component StrongholdStatus {
    id = 20030;

    IntervalChecker interval = 1;
}

type StrategyVector {
    UnitSide side = 1;
    improbable.gdk.transform_synchronization.FixedPointVector3 vector = 2;
}

component StrongholdSight {
    id = 20031;

    IntervalChecker interval = 1;
    StrategyVector strategy_vector = 2;
    map<EntityId,TargetStrongholdInfo> target_strongholds = 4;
    list<FrontLineInfo> front_line_corners = 5;
    map<uint32,TargetHexInfo> target_hexes = 6;

    command improbable.gdk.core.Empty set_strategy_vector(StrategyVector);
}

type TeamOrder {
    uint32 commander_rank = 1;
    int32 soldiers_number = 2;
    OrderType order = 3;
    int32 stack = 4;
    float rot = 5;
}

type TeamOrderList {
    list<TeamOrder> orders = 1;
}

type TurretOrder {
    int32 turret_id = 1;
    int32 turrets_number = 2;
    int32 stack = 3;
    float rot = 4;
}

type TurretOrderList {
    list<TurretOrder> orders = 1;
}

enum FactoryOrderType {
    None = 0;
    Follower = 1;
    Superior = 2;
    Team = 3;
    Turret = 4;
}

enum ContainerState {
    Empty = 0;
    Reserved = 1;
    Created = 2;
}

type UnitContainer {
    improbable.gdk.transform_synchronization.FixedPointVector3 pos = 1;
    ContainerState state = 2;
}

component UnitFactory {
    id = 20032;

    transient list<UnitContainer> containers = 3;

    FactoryOrderType current_type = 4;

    transient list<TeamOrder> team_orders = 10;
    transient list<FollowerOrder> follower_orders = 11;
    transient list<SuperiorOrder> superior_orders = 12;
    transient list<TurretOrder> turret_orders = 13;

    IntervalChecker product_interval = 20;

    command improbable.gdk.core.Empty add_follower_order(FollowerOrder);
    command improbable.gdk.core.Empty add_superior_order(SuperiorOrder);
    command improbable.gdk.core.Empty add_team_order(TeamOrderList);
    command improbable.gdk.core.Empty add_turret_order(TurretOrderList);
    command improbable.gdk.core.Empty set_container(UnitContainer);
}

component UnitArmyObserver {
    id = 20033;

    IntervalChecker interval = 1;
}

// headquarters:20040~
type OrganizeOrder {
    EntityId customer = 1;
    UnitSide side = 2;
    uint32 customer_rank = 3;
    improbable.gdk.transform_synchronization.FixedPointVector3 pos = 4;
}

type ReserveInfo {
    list<EntityId> followers = 1;
}

// rank:reserves
type ReserveMap {
    map<uint32,ReserveInfo> datas = 1;
}

type FactoryMap {
    map<EntityId,ReserveMap> reserves = 1;
}

component HeadQuarters {
    id = 20040;

    IntervalChecker interval = 1;

    uint32 upper_rank = 2;
    uint32 max_rank = 3;

    FactoryMap factory_datas = 4;

    transient list<OrganizeOrder> orders = 5;

    command improbable.gdk.core.Empty add_order(OrganizeOrder);
}

type CommanderInfo {
    EntityId commander_id = 1;
    uint32 rank = 2;
}

type CreatedCommanderList {
    list<CommanderInfo> commanders = 1;
}

enum CommanderManagerState {
    None = 0;
    CreateCommander = 1;
}

component CommandersManager {
    id = 20041;

    IntervalChecker interval = 1;

    map<EntityId,TeamInfo> commander_datas = 2;
    CommanderManagerState state = 3;
    EntityId factory_id = 4;
    float sight_range = 5;
    uint32 max_rank = 6;

    command improbable.gdk.core.Empty add_commander(CreatedCommanderList);
}

type TargetHeadQuartersInfo {
    EntityId head_quarter_id = 1;
    UnitSide side = 2;
    improbable.Coordinates position = 3;
}

component StrategyOrderManager {
    id = 20042;

    IntervalChecker interval = 1;

    TargetHeadQuartersInfo target_hq = 2;
}

// turret:20050~
type TurretInfo {
    UnitSide side = 1;
    int32 master_id = 2;
    EntityId entity_id = 3;
}

component TurretHub {
    id = 20050;

    map<EntityId,TurretInfo> turrets_datas = 1;
}

component TurretComponent {
    id = 20051;

    int32 master_id = 1;
}