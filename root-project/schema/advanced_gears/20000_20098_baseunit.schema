package advanced_gears;
import "improbable/gdk/core/common.schema";
import "improbable/gdk/transform_synchronization/transform_internal.schema";
import "advanced_gears/common.schema";

enum OrderType {
    Idle = 0;
    Move = 1;
    Attack = 2;
    Keep = 3;
    Escape = 5;
    Organize = 6;
}

type OrderInfo {
    OrderType order = 1;
}

type OrderPair {
    OrderType self = 1;
    OrderType upper = 2;
}

type ForceStateChange {
    UnitSide side = 1;
    UnitState state = 2;
}

// state:20000~20009
component BaseUnitStatus {
    id = 20000;
    UnitSide side = 1;
    UnitType type = 2;
    UnitState state = 3;
    OrderType order = 4;

    command improbable.gdk.core.Empty set_order(OrderInfo);
    command improbable.gdk.core.Empty force_state(ForceStateChange);
}

component BaseUnitReviveTimer {
    id = 20003;

    bool is_start = 1;
    float rest_time = 2;
}

type HealthModifier {
    uint32 type = 1;
    int32 amount = 2;
}

type HealthModifiedInfo {
    HealthModifier modifier = 1;
    int32 health_before = 2;
    int32 health_after = 3;
}

component BaseUnitHealth {
    id = 20002;
    int32 health = 1;
    int32 max_health = 2;

    int32 defense = 3;

    command improbable.gdk.core.Empty modify_health(HealthModifier);
    event HealthModifiedInfo health_modified;
}

// move:20010~20019
component BaseUnitMovement {
    id = 20010;

    float move_speed = 1;
    float rot_speed = 2;

    bool is_target = 3;
    improbable.gdk.transform_synchronization.FixedPointVector3 target_position = 4;
    float target_range = 5;
    
    improbable.gdk.transform_synchronization.FixedPointVector3 commander_position = 6;

    float consume_rate = 7;
}

component BaseUnitSight {
    id = 20011;

    float range = 1;
    IntervalChecker interval = 2;
    // ability:night vision
}

component BaseUnitAction {
    id = 20012;

    IntervalChecker interval = 1;

    float angle_speed = 5;

    bool is_target = 6;
    list<improbable.gdk.transform_synchronization.FixedPointVector3> enemy_positions = 7;
}

type TargetBaseInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.gdk.transform_synchronization.FixedPointVector3 position = 3;
    UnitType type = 4;
    UnitSide side = 5;
}

type TargetInfo {
    bool is_target = 1;
    EntityId target_id = 2;
    improbable.gdk.transform_synchronization.FixedPointVector3 position = 3;
    UnitType type = 4;
    UnitSide side = 5;
    EntityId commander_id = 6;
    float ally_range = 7;
}

component BaseUnitTarget {
    id = 20013;

    TargetInfo target_info = 1;

    command improbable.gdk.core.Empty set_target(TargetInfo);
}

type PostureData {
    PosturePoint point = 1;
    list<improbable.gdk.transform_synchronization.CompressedQuaternion> rotations = 2;
}

type PostureInfo {
    map<PosturePoint, PostureData> datas = 1;
}

component BaseUnitPosture {
    id = 20014;

    bool initialized = 1;
    IntervalChecker interval = 2;

    improbable.gdk.transform_synchronization.CompressedQuaternion root = 3;
    PostureInfo posture = 4;

    event PostureData posture_changed;
}

// commander:20020~
type FollowerInfo {
    list<EntityId> followers = 1;
    list<EntityId> under_commanders = 2;
}

type SuperiorInfo {
    EntityId entity_id = 1;
}

type HQInfo {
    EntityId entity_id = 1;
}

type TeamConfig {
    int32 soldiers = 1;
    int32 commanders = 2;
}

component CommanderStatus {
    id = 20020;

    OrderPair order = 1;
    TeamConfig team_config = 2; 
    uint32 rank = 3;

    float ally_range = 4;
}

type TeamInfo {
    uint32 rank = 1;
    UnitState state = 2;
    list<EntityId> soldiers = 5;
    list<EntityId> under_commanders = 6;
}

type TeamInfoResponse {
    EntityId hq_entity_id = 1;
    TeamInfo team_info = 2;
}

type TeamInfoRequest {
    EntityId hq_entitt_id = 1;
}

component CommanderTeam {
    id = 20021;

    FollowerInfo follower_info = 1;
    SuperiorInfo superior_info = 2;
    HQInfo hq_info = 3;

    command improbable.gdk.core.Empty add_follower(FollowerInfo);
    command improbable.gdk.core.Empty set_superior(SuperiorInfo);
    command TeamInfoResponse get_team_info(TeamInfoRequest);
}

type WarPower {
    UnitSide side = 1;
    float power = 2;
}

component CommanderSight {
    id = 20022;

    float range = 1;
    IntervalChecker interval = 2;

    TargetBaseInfo target_info = 5;

    list<WarPower> war_powers = 7;
}

type FollowerOrder {
    EntityId customer = 1;
    EntityId hq_entity_id = 2;
    UnitSide side = 3;
    UnitType type = 4;
    int32 number = 5;
    uint32 rank = 6;
}

type SuperiorOrder {
    list<EntityId> followers = 1;
    EntityId hq_entity_id = 2;
    UnitSide side = 3;
    uint32 rank = 4;
}

enum CommandActionType
{
    None = 0;
    Product = 1;
    Capturing = 2;
}

component CommanderAction {
    id = 20023;

    bool is_target = 1;
    IntervalChecker interval = 2;
    CommandActionType action_type = 3;
}

// stronghold:20030~
component StrongholdUnitStatus {
    id = 20030;

    float capture_range = 1;
}

component UnitFactory {
    id = 20032;

    int32 resource = 1;
    int32 resource_max = 2;

    IntervalChecker interval = 3;

    UnitType current_type = 4;

    transient list<FollowerOrder> follower_orders = 5;
    transient list<SuperiorOrder> superior_orders = 6;

    IntervalChecker product_interval = 7;

    command improbable.gdk.core.Empty add_follower_order(FollowerOrder);
    command improbable.gdk.core.Empty add_superior_order(SuperiorOrder);
}

component UnitArmyObserver {
    id = 20033;

    IntervalChecker interval = 1;
}

// headquarters:20040~
type OrganizeOrder {
    EntityId customer = 1;
    UnitSide side = 2;
    uint32 customer_rank = 3;
    improbable.gdk.transform_synchronization.FixedPointVector3 pos = 4;
}

type ReserveInfo {
    list<EntityId> followers = 1;
}

// rank:reserves
type ReserveMap {
    map<uint32,ReserveInfo> datas = 1;
}

type FactoryMap {
    map<EntityId,ReserveMap> reserves = 1;
}

component HeadQuarters {
    id = 20040;

    IntervalChecker interval = 1;

    uint32 upper_rank = 2;
    uint32 max_rank = 3;

    FactoryMap factory_datas = 4;

    transient list<OrganizeOrder> orders = 5;

    command improbable.gdk.core.Empty add_order(OrganizeOrder);
}

type CreatedCommanderInfo {
    list<EntityId> commanders = 1;
}

enum CommanderManagerState {
    None = 0;
    CreateCommander = 1;
}

component CommandersManager {
    id = 20041;

    IntervalChecker interval = 1;

    map<EntityId,TeamInfo> commander_datas = 2;
    CommanderManagerState state = 3;
    EntityId factory_id = 4;
    float sight_range = 5;

    command improbable.gdk.core.Empty add_commander(CreatedCommanderInfo);
}